/*

        #######################

        Estructures usades

            - Catàleg amb matrícules i ubicacions
            - Hash table que emula una àrea d'emmagatzematge de contenidors. 
            - Àrea d'espera (llista de std)
            - Llista amb nodes de llocs buits 

        #######################       
*/

enum Estat{lliure, ocupat, retirat};

// Estructura que conté les ubicacions buides de la terminal.
struct nodelliure {
    nodelliure *seg;
    nodelliure *ant;
    ubicacio u;
};

nodelliure *_prim;

// Estructura que emula l'àrea d'emmagatzematge.
struct nodeterm {
    ubicacio _ubi;
    contenidor _cont;
    Estat _estat;
};

nodeterm **_taula;

int _mida;                      // Mida de la taula.
int _alc, _prof, _fil;          // Alçada, profunditat i fileres de la taula.
int _quants;                    // Número de contenidors de la taula.
int _num_ops;                   // Número d'operacions de la grua de la terminal.
cataleg<ubicacio> *_cat;        // Catàleg amb matrícules i ubicacions.
terminal::estrategia _st;       // Estrategia que usa la terminal.
list<contenidor> _espera;       // Llista d'espera de la terminal.



// Mètodes privats

//Insereix un contenidor amb l'estrategia First Fit.
static void insereix_ff(const contenidor &c);

//Insereix un contenidor amb l'estrategia Lliure.
static void insereix_lliure(const contenidor &c);

// Busca el contenidor amb la matrícula m 
static contenidor busca_espera(list<contenidor>::const_iterator prin, list<contenidor>::const_iterator fi, const string &m);

// Funció de hash a partir d'una ubicació i la mida de la taula.
static int hash(const ubicacio &k, int mida) throw();

// Mou el contenidor de la ubicació passada per paràmetre. També mira els contenidors adjacents.
// static void mover_espera(const ubicació &u);